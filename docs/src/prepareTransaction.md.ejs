## prepareTransaction

`prepareTransaction(address: string, transaction: object, instructions: object): Promise<object>`

Prepare a transaction. The prepared transaction must subsequently be [signed](#sign) and [submitted](#submit).

This method works with any of [the transaction types supported by rippled](https://developers.ripple.com/transaction-types.html).

Notably, this is the preferred method for preparing a `DepositPreauth` transaction (added in rippled 1.1.0).

### Parameters

Name | Type | Description
---- | ---- | -----------
transaction | [transaction](https://developers.ripple.com/transaction-formats.html) | The specification (JSON) of the transaction to prepare. Typically, you should set `Account` to the address of the account that is creating the transaction. Common fields like `Fee`, `Flags`, and `Sequence` may be omitted, and `prepareTransaction` will set them automatically.
instructions | [instructions](#transaction-instructions) | *Optional* Instructions for executing the transaction

### Return Value

This method returns a promise that resolves with an object with the following structure:

<aside class="notice">
All "prepare*" methods have the same return type.
</aside>

<%- renderSchema("output/prepare.json") %>

### Example

```javascript
const address = 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59';
const tx = await api.prepareTransaction({
  TransactionType: 'DepositPreauth',
  //   Account: a.address,
  //   Authorize: b.address
})

// const tx = await api.prepareTransaction({
  //   
  // })
  // console.log('tx', tx)
  // const signed = api.sign(tx.txJSON, a.secret)
  // console.log('signed', signed)

const payment = <%- importFile('test/fixtures/requests/prepare-payment.json') %>;
return api.preparePayment(address, payment).then(prepared =>
  {/* ... */});
```

<%- renderFixture("responses/prepare-payment.json") %>
